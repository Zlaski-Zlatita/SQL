Базы данных - для хранения данных и связей между этими данными.
Виды баз данных: (реляционные)SQL - хранят строго структурированные данные, коорые обычно представляют объекты реального мира(сведения о человеке, корзина в магазине). Хранятся в сгруппированных таблицах. Структура таблиц задаётся ещё на этапе создания приложения. Таблицы свяязаны между собой.
                 (нереляционны)NodeSQL - подпример(документо-ориентированные: хранят информацию в виде иерархических структур баз  данных, таких как JSON  формат, тоисть данные представлены как объект)(2. пары-ключ значения: к какому-то ключу сохраняем данные и потом эти данные извлекаем, sample: то, что в SQL может быть представлено, как собрание таблиц, в NodeSQL представлено как одно целое(MySQL, PostgreSQL, (MongoDB, Reddis)) )
Реляционные базы данных:
нормы, по которым таблицы должны создаваться - одна ячейка, 1 значение
Нормальная форма - каждая запись должна иметь уникальный идентификатор (первичный ключ, id)(допусти 1 фамилия: Пышкин, но имена разные(Вася, Петя, etc)) id 
                                            Пример SQL

                                          id     Фамилия                  id     Teacher_id   Урок                связь(one-to-many)
                                          1      Пышкин   ---------->     1      1 (фамилия)  Математика          
                                          2      Чижиков                  2      1            Русский
                                                                          3      1            Физика
                                                                          4      2            Физ-ра
                                                                          5      2            Литература

                                   Чнловек                                               Паспорта
                                   id   Фамилия   Имя    Passport_id                     id     Дата выдачи  Серия  Номер          связь (one-to-one)
                                   1    Пышкин    Иван   1                               1      23.09.19     1231   124124
                                   2    Чижиков   Пётр   2                               2      29.05.10     1234   567567           



              Учителя                Ученики          Учителя-ученики
              id   Фамилия           id   Фамилия     Teacher_id    Student_id          связь (many-to-many)
              1    Пышкин            1    Иванов      1             1
              2    Чижиков           2    Петров      2             2
                                     3    Сидоров     2             1
                                                      2             2
                                                      3             3

My SQL (БУДЕМ ИСПОЛЬЗОВАТЬ В КАЧЕСТВЕ СИСТЕМЫ БАЗЫ ДАННЫХ, ) : изучи, какой код нужно написать, чтобы запустить программу

cd "Programm Files" откроем папку - вниз Enter по-нарастающей
cd MySQL
cd "My SQL Server 8.0"
cd  bin                 папка bin
my sql -u root -p           -u - username, -p-password
пишем пароль
SHOW DATABASES;
CREATE DATABASE sql_course;         создать, название базы данных
DROP DATABASE sql_course;           удалить базу данных, название
SHOW DATABASES;
USE sql_course;
show tables;                        покажи таблицы, к-е были созданы в этой базе данных

Для того, чтобы создать таблицу: в скобках указываются поля, к-е будут в этой таблице(колонки)
my sql> CREATE TABLE teacher(                             НАЗВАНИЕ ТАБЛИЦЫ
    - > id INT AUTO_INCREMENT PRIMARY KEY,                СОЗДАЁМ УНИКАЛЬНЫЙ ИДЕНТИФИКАТОР, К-Й БУДЕТ ЧИСЛОВОГО ЗНАЧЕНИЯ(int), БУДЕТ АВТОИНКРЕМЕНТИРОВАТЬСЯ, И ЭТО ПЕРВИЧНЫЙ КЛЮЧ
    - > surname VARCHAR(255) NOT NULL,                    2Е ПОЛЕ - ЭТО ФАМИЛИЯ УЧИТЕЛЯ, КАК СТРОКОВОЕ ЗНАЧЕНИЕ УКАЗЫВАЕМ varchar, И ОНО НЕ МОЖЕТ БЫТЬ ПУСТЫМ not null      VARCHAR(255) stores 255 characters, which may be more than 255 bytes.
    - > );

show tables;                        теперь у нас есть 1 таблица в этой базе данных
show columns FROM teacher;

CREATE TABLE lesson(
    - > id INT AUTO_INCREMENT PRIMARY KEY, 
    - > name VARCHAR(255) NOT NULL,
    - > teacher_id INT NOT NULL,                              тип данных в таблице 1 ко многим => делаем ссылку на таблицу с учителями
    - > FOREIGN KEY (teacher_id) references teacher(id);      создаём поле(в скобках), ссылаемся на таблицу, с ко-й этот внешний ключ будет связывать

INSERT INTO teacher (surname) values ("Ивашкин") вставим(наполним таблицу данными)? назв-е таблицы, поле к-е хотим вставить, после values указываются знач-я в том же порядке
INSERT INTO teacher (surname) values ("Вуд")
INSERT INTO teacher (surname) values ("Мелони")

SELECT * FROM teacher;                                       делаем запрос на получение данных, * - это название поля из таблицы

SELECT id, surname, surname FROM teacher;

SELECT DISTINCT surname FROM teacher;                        для нахождения уникального значения поля из таблицы, тоисть например в случаях, когда фамилии могут повторяться

SELECT * FROM teacher WHERE id = 1;                         хотим получить данные по какому-то условию ДОПУСТИМ ХОТИМ ПОЛУЧИТЬ ЗАПИСЬ С ID, равным 1

SELECT * FROM teacher WHERE id > 3;                         или все значения: больше-меньше

              если поле, к-е мы ищем, является строчным
